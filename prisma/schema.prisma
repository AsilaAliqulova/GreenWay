// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id              Int     @id @default(autoincrement())
  fullname        String
  phone           String
  email           String  @unique
  image_url       String?
  hashedPassword  String
  hashedToken     String?
  is_active       Boolean @default(false)
  activation_link String?
  balance         Int     @default(0)
  role            Role    @default(user)

  ecoReport      EcoReport[]
  userVotes      UserVotes[]
  participations Participations[]
  like           Like[]
  comments       Comments[]
  coins          Coins[]
  order          Order[]
  Content        Content[]

  @@map("user")
}

model Otp {
  id              String   @id @default(uuid())
  otp             String
  expiration_time DateTime
  verified        Boolean  @default(false)

  @@map("otp")
}

model Organization {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  phone       String
  email       String
  website     String?
  socials     String?
  votes       Votes[]
  event       Event[]
  challenges  Challenges[]

  @@map("organization")
}

model Content {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  mediaId     Int
  adminId     Int
  createdAt   DateTime @default(now())
  updated     DateTime @updatedAt
  admin       User     @relation(fields: [adminId], references: [id])
  media       Media    @relation(fields: [mediaId], references: [id])

  @@map("content")
}

model Media {
  id        Int         @id @default(autoincrement())
  url       String
  type      String
  createdAt DateTime    @default(now())
  updated   DateTime    @updatedAt
  content   Content[]
  ecoReport EcoReport[]

  @@map("media")
}

model EcoReport {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  mediaId     Int
  userId      Int
  createdAt   DateTime   @default(now())
  updated     DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  media       Media      @relation(fields: [mediaId], references: [id])
  like        Like[]
  comments    Comments[]

  @@map("eco_report")
}

model Votes {
  id             Int      @id @default(autoincrement())
  title          String
  description    String
  createdAt      DateTime @default(now())
  endDate        String
  organizationId Int

  organization Organization @relation(fields: [organizationId], references: [id])
  userVotes    UserVotes[]

  @@map("votes")
}

model UserVotes {
  id          Int      @id @default(autoincrement())
  userId      Int
  votesId     Int
  vote        String
  description String?
  createdAt   DateTime @default(now())
  updated     DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  votes       Votes    @relation(fields: [votesId], references: [id])

  @@map("user_votes")
}

model Event {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  image_url      String
  organizationId Int
  createdAt      DateTime         @default(now())
  updated        DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id])
  participations Participations[]

  @@map("event")
}

model Challenges {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  image_url      String
  organizationId Int
  deadline       String
  createdAt      DateTime         @default(now())
  updated        DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id])
  participations Participations[]

  @@map("challenges")
}

model Participations {
  id              Int         @id @default(autoincrement())
  userId          Int
  eventId         Int?
  challengesId    Int?
  certificate_url String
  createdAt       DateTime    @default(now())
  updated         DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  challenges      Challenges? @relation(fields: [challengesId], references: [id])
  event           Event?      @relation(fields: [eventId], references: [id])

  @@map("participations")
}

model Like {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  ecoReportId Int
  createdAt   DateTime  @default(now())
  updated     DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  ecoReport   EcoReport @relation(fields: [ecoReportId], references: [id])

  @@map("like")
}

model Comments {
  id          Int       @id @default(autoincrement())
  userId      Int
  ecoReportId Int
  text        String
  createdAt   DateTime  @default(now())
  updated     DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  ecoReport   EcoReport @relation(fields: [ecoReportId], references: [id])

  @@map("comments")
}

model Coins {
  id        Int      @id @default(autoincrement())
  userId    Int
  amount    Int
  reason    String
  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("coin")
}

model Order {
  id          Int          @id @default(autoincrement())
  userId      Int
  total_price Float
  status      String
  createdAt   DateTime     @default(now())
  updated     DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  orderItems  OrderItems[]
  delivery    Delivery[]

  @@map("order")
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_item")
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  price       Float
  image_url   String
  createdAt   DateTime     @default(now())
  updated     DateTime     @updatedAt
  orderItems  OrderItems[]

  @@map("product")
}

model Delivery {
  id              Int      @id @default(autoincrement())
  orderId         Int
  address         String
  delivery_method String
  delivery_status String
  delivery_date   String
  delivery_cost   Float
  createdAt       DateTime @default(now())
  updated         DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id])

  @@map("delivery")
}

model Region {
  id   Int    @id @default(autoincrement())
  name String

  district District[]

  @@map("region")
}

model District {
  id             Int              @id @default(autoincrement())
  name           String
  regionId       Int
  region         Region           @relation(fields: [regionId], references: [id])
  airPollution   AirPollution[]
  waterPollution WaterPollution[]
  soilPollution  SoilPollution[]

  @@map("district")
}

model AirPollution {
  id               Int      @id @default(autoincrement())
  districtId       Int
  pollution_leavel String
  pollutions       String
  date             String
  district         District @relation(fields: [districtId], references: [id])

  @@map("air_pollution")
}

model WaterPollution {
  id               Int      @id @default(autoincrement())
  districtId       Int
  pollution_leavel String
  pollutions       String
  date             String
  district         District @relation(fields: [districtId], references: [id])

  @@map("water_pollution")
}

model SoilPollution {
  id               Int      @id @default(autoincrement())
  districtId       Int
  pollution_leavel String
  pollutions       String
  date             String
  district         District @relation(fields: [districtId], references: [id])

  @@map("soil_pollution")
}
